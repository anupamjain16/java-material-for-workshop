JDBC
####
=> book application with MVC design pattern
=> connection factory
=> SCListner to keep a connection object that u can use anywhere
=> No Scriplet only jstl
=> Apply sec using filter==> Front Controller design pattern
=> session mgt, HttpSessionListern
 addBook.do
=> put jsp in secure folder 
	/WEB-INF/views/
=> strongly follow MVC





	mysql -u root -p
	use  yms;

	create table Book (id integer not null auto_increment, author varchar(255), isbn varchar(255), price double precision not null, title varchar(255), primary key (id));

	insert into Book (author, isbn, price, title) values ('raj', 'abc121', 4455.8, 'java head first');



	Connection properties
	---------------------
	"jdbc:mysql://127.0.0.1:3306/yms","root","root"

 




Doing CRUD
===========


	Step 1: Create DTO

		public class Book {
		private int id;
		private String isbn;
		private String title;
		private String author;
		private double price;
	}



	Step 2: Create DAO interface ( Design to interface )

	public interface BookDao {
		public List<Book> getAllBooks();
		public Book getBookById(int bookId);
		public void addBook(Book book);
		public void updateBook(Book book);
		public void removeBook(int bookId);
	}





	Provide implementation
	=======================

	public class BookDaoImp implements BookDao {

		Connection con;

		public BookDaoImp(Connection con) {
			this.con = con;
		}
		//.......
		//......
 	}


	Reading all records
	-------------------


			Connection con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/yms","root","root");
			stmt=con.createStatement();
			rs=stmt.executeQuery("select * from Book");
			while(rs.next()){
				System.out.print(rs.getInt("id")+" ");
				System.out.print(rs.getString("isbn")+" ");
				System.out.print(rs.getString("title")+" ");
				System.out.print(rs.getString("author")+" ");
				System.out.print(rs.getDouble("price")+" ");
		        }

	Adding record
	-------------


		con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/yms","root","root");
			stmt=con.prepareStatement("insert into Book (author, isbn, price, title) values (?, ?, ?, ?)");
			stmt.setInt(1, "raja");
			stmt.setString(2, "abc121");
			stmt.setDouble(3, 3333.6);
			stmt.setString(2, "java head first");
			stmt.executeUpdate();


	Update record
	---------------
			con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/yms","root","root");
			stmt=con.prepareStatement("update Book set author=? ,isbn=? ,price=? title=? where id=?");
		
			stmt.setString(1, "raja kumar");
			stmt.setString(2, "abc121");
			stmt.setDouble(3, 3333.6);
			stmt.setString(2, "java head first part II");
			stmt.setInt(4, 2);
			stmt.executeUpdate();
			

	Delete record
	--------------

			stmt=con.prepareStatement("delete from Book where id=?");
			stmt.setInt(1, 2);
			stmt.executeUpdate();



	Get Book as per id
	----------------------- 
			con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/yms","root","root");
			stmt=con.prepareStatement("select * from Book where id=?");
			// 1 is position no of empId field 
			stmt.setInt("id", 11);
			 rs=stmt.executeQuery();
			
			if(rs.next()){
				System.out.println("id:"+rs.getInt(1));
			}



db.properties
-------------------
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/UserDB
user=root
password=root



Create an connection factory
-------------------------


package com.daniel.util;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class DbUtil {

    private static Connection connection = null;

    public static Connection getConnection() {
        if (connection != null)
            return connection;
        else {
            try {
                Properties prop = new Properties();

                InputStream inputStream = DbUtil.class.getClassLoader().getResourceAsStream("db.properties");

                prop.load(inputStream);
                String driver = prop.getProperty("driver");
                String url = prop.getProperty("url");
                String user = prop.getProperty("user");
                String password = prop.getProperty("password");
                Class.forName(driver);
                connection = DriverManager.getConnection(url, user, password);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return connection;
        }

    }
}



fetching autogenerated key:
-----------------------------
String sql = "INSERT INTO table (column1, column2) values(?, ?)";
stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);


stmt.executeUpdate();
if(returnLastInsertId) {
   ResultSet rs = stmt.getGeneratedKeys();
    rs.next();
   auto_id = rs.getInt(1);
}



CRUD application Storing book info in database
------------------------------------------------
	

  Step 1: Add jdbc driver jar to project

  Step 2: create mysql table book

	done earlier

 Step 3:
	Add jar to tomcat lib folder

 Step 4:
	create an form

	<form action="addBook.do" method="POST">
	ISBN : <input type="text" name="isbn" value="" size="15"/> <BR>
	Title : <input type="text" name="title" value="" size="50"/> <BR>
	Author : <input type="text" name="author" value="" size="50"/> <BR>
	Price : <input type="text" name="price" value="" size="10"/> <BR>
	<input type="submit" value="Add" />
	</form>


 Step 5:

	create processing servlet:

	
  

	i) load the driver in init() method and create an con object


	con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/raj","root","root");




	ii) put insertion code inside doPost()
	
	String isbn = request.getParameter("isbn");
	String author = request.getParameter("author");
	String title = request.getParameter("title");
	String priceStr = request.getParameter("price");

	pstmt=con.prepareStatement("insert into books(isbn, author, title, price)values	(?,?,?,?)");

	pstmt.setString(1, isbn);
	pstmt.setString(2, author);
	pstmt.setString(3, title);
	pstmt.setFloat(4, price);
			pstmt.executeUpdate();






9.1: DB best practices:
-----------------------

	=> reading through property file
	=> Connection factory

db.properties
-----------------
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/springexp
jdbc.username=root
jdbc.password=root


reading property file:
---------------------
 	Properties prop = new Properties();
        InputStream inputStream = DbUtil.class.getClassLoader().
        getResourceAsStream("/db.properties");
        prop.load(inputStream);
        String driver = prop.getProperty("driver");
        String url = prop.getProperty("url");
        String user = prop.getProperty("user");
        String password = prop.getProperty("password");
        Class.forName(driver);
        connection = DriverManager.getConnection(url, user, password);




9.2: DB best practices:tomcat connection pooling
-------------------------------------------------

	Step 1;

	mapping in context.xml

	<Resource
	name="jdbc/test"
	auth="Container"
	driverClassName="com.mysql.jdbc.Driver"
	type="javax.sql.DataSource"
	url="jdbc:mysql://localhost:3306/exp121"
	username="root"
	password="root" >
	</Resource>



	Step 2:


	mapping in web.xml
	----------------------
	<resource-ref>
  	  <description>Test Database</description>
   	 <res-ref-name>jdbc/test</res-ref-name>
   	 <res-type>javax.sql.DataSource</res-type>
   	 <res-auth>Container</res-auth>
	  </resource-ref>

	Step 3: pull vs push
	------
	@Resource(name="jdbc/test")
	private DataSource ds;
	private Connection conn;


	conn = ds.getConnection();

	then use connection object as usual;



Display all books:
------------------

<body>
    <table border=1>
        <thead>
            	<tr>Book Id</th>
                <th>isbn</th>
                <th>title</th>
                <th>author</th>
		 <th>price</th>
            </tr>
        </thead>
        <tbody>
            <c:forEach items="${books}" var="book">
                <tr>
                    <td><c:out value="${book.id}" /></td>
                    <td><c:out value="${book.isbn}" /></td>
		    <td><c:out value="${book.title}" /></td>
                    <td><c:out value="${book.author}" /></td>
		     <td><c:out value="${book.price}" /></td>

                </tr>
            </c:forEach>
        </tbody>
    </table>
</body>






maven:
-----------
	<build>
		<finalName>demo</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>




<dependency>
    <groupId>javax</groupId>
    <artifactId>javaee-api</artifactId>
    <version>7.0</version>
    <scope>provided</scope>
</dependency>



<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
    <version>1.2</version>
</dependency>




