JDBC
####################

	==> JDBC Introduction

	==> JDBC Architecture

	==> JDBC Drivers

	==> Hello World 

	==> JDBC Statements, Preparedstatement, ResultSet types

	==>DAO DTO design pattern

	==> CRUD Operations

	==> Calling Stored Procedures

	==> Scrollable resultSet

	==> Getting resultset meta data

	==> Auto key generation

	==> Batch Processing

	==> Transactions



JDBC Introduction
==================

	What is JDBC?
	-------------

		==>API to intract with RDBMS

		==>JDBC API has two major packages:- java.sql.* and javax.sql.*



 	JDBC Architecture
 	-----------------

	Driver
	------

		==>Ensure consistent and uniform access to any database
		==>Driver act as a translator bw client request and database access

	Driver Manager
	----------------

		==>Class that manages establishment of connection
		==>Driver Manager need to told which JDBC driver it should try to connect




Hello World
============

mysql -u root -p

	Create database employee_jdbc;
	use  employee_jdbc;



	create table employee(
		employeeId int not null primary key,
		employeeName varchar(40) not null,
		employeeSalary int not null
	);

	insert into employee(employeeId ,employeeName ,employeeSalary)  
	values(121,'raja',23366.5);

	insert into employee(employeeId ,employeeName ,employeeSalary )  
	values(11,'amit',55366.5);




	preparedStatement = con.prepareStatement
		(insert into employee(employeeId ,employeeName ,employeeSalary)  values(?,?,?));

	
	Connection properties
	---------------------
	"jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root"

 




Doing CRUD
===========


	Step 1: Create DTO

	public class Employee {
		private int employeeId;
		private String employeeName;
		private double employeeSalary;



	Step 2: Create DAO interface ( Design to interface )



	public interface EmployeeDao {
		public List<Employee>getAllEmployee();
		public void addEmployee(Employee employee);
		public void deleteEmployee(int employeeId);
		public void updateEmployee(Employee employee);
		public Employee getEmployeeById(int employeeId);
	}





	Provide implementation
	=======================

	public class EmployeeDaoImp implements EmployeeDao {

		Connection con;

		public EmployeeDaoImp(Connection con) {
			this.con = con;
		}
		//.......
		//......
 	}


	Reading all records
	-------------------


			Connection con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.createStatement();
			rs=stmt.executeQuery("select * from employee");
			while(rs.next()){
				System.out.print(rs.getInt("employeeId")+" ");
				System.out.print(rs.getString("employeeName")+" ");
				System.out.println(rs.getDouble("employeeSalary"));
				
		        }







class DoMyServlet extends HttpS...{

	doGet(....., ..........){
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("driver is loaded...");
		} catch (ClassNotFoundException ex) {

		/// then they fetch data from db
		}

	}

}



class DoMyServlet extends HttpS...{

	doGet(....., ..........){
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("driver is loaded...");
		} catch (ClassNotFoundException ex) {

		/// then they fetch data from db
		}

	}

}




class DoMyServlet extends HttpS...{

	doGet(....., ..........){
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("driver is loaded...");
		} catch (ClassNotFoundException ex) {

		/// then they fetch data from db
		}

	}

}




















	Adding record
	-------------


			con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.prepareStatement("insert into employee(employeeId ,employeeName ,employeeSalary) values(?,?,?)); 			,employeeDob )values(?,?,?,?)");
			stmt.setInt(1, 2);
			stmt.setString(2, "rajiv");
			stmt.setDouble(3, 3333.6);
			stmt.executeUpdate();


	Update record
	---------------
			con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.prepareStatement("update employee set employeeName=? ,employeeSalary=? where employeeId=?");
		
			stmt.setString(1, "rajiv again");
			stmt.setDouble(2, 3333.6);
			stmt.setInt(4, 2);
			stmt.executeUpdate();
			

	Delete record
	--------------


			stmt=con.prepareStatement("delete from employee where employeeId=?");
			stmt.setInt(1, 2);
			stmt.executeUpdate();



	Get Employee as per id
	----------------------- 
			con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.prepareStatement("select * from employee where employeeId=?");

			// 1 is position no of empId field 
			stmt.setInt("employeeId", 11);
			 rs=stmt.executeQuery();
			
			if(rs.next()){
				System.out.println("employeeId:"+rs.getInt(1));
			}




	Type of statement:
	================

	Statement==>used to create conneciton object

	PreparedStatement==>used to execute precompiled  SQL statementand retrive data into RS

	CallableStatement==>used for calling stored procedure





More good practices:

-----------------------

reading configuration information from properties files:


db.properties
-------------------
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/UserDB
user=root
password=root



Create an connection factory
-------------------------


package com.daniel.util;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class DbUtil {

    private static Connection connection = null;

    public static Connection getConnection() {
        if (connection != null)
            return connection;
        else {
            try {
                Properties prop = new Properties();

                InputStream inputStream = DbUtil.class.getClassLoader().getResourceAsStream("/db.properties");

                prop.load(inputStream);
                String driver = prop.getProperty("driver");
                String url = prop.getProperty("url");
                String user = prop.getProperty("user");
                String password = prop.getProperty("password");
                Class.forName(driver);
                connection = DriverManager.getConnection(url, user, password);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return connection;
        }

    }
}











Callable Statement
=====================

 	==> For stored procedure
	==> Hello World store procedure





DELIMITER // 
Create PROCEDURE AllEmployees()
BEGIN
Select * from employee;
END
// 
DELIMITER ;




DELIMITER // 
CREATE PROCEDURE Test(IN num1 INT, IN num2 INT ,OUT param1 INT) 
BEGIN 
set param1 := num1 + num2; 
END 
// 
DELIMITER ;











Check store procedure

CALL test(3,6,@a);
select @a; 

Calling store procdure

			con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/raj","root","root");
			cstmt=con.prepareCall("call test(?,?,?)");
			cstmt.setInt(1, 3);
			cstmt.setInt(2, 44);
			cstmt.registerOutParameter(3, Types.INTEGER);
			cstmt.execute();
			System.out.println("Result:"+cstmt.getInt(3));




Scrollable resultSet

	CreateStatement accept some constants:

	stmt=con.createStatement			(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);


	What is the meaning of SCROLL_SENSITIVE?

		==>A ResultSet thats scroll-sensitive is live.

		==> As other users modify the data reflected in the ResultSet, 
			the ResultSet can be changed to reflect the revised view of the data

	What is the meaning of Scroll-Insensitive?

	==>A ResultSet thats scroll-insensitive is a static view of the data
	==> ie If the data in the ResultSet is changed by other clients, the ResultSet isnt updated accordingly


			con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_jdbc","root","root");
			stmt=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			
			rs=stmt.executeQuery("select * from employee");
			
			while(rs.next()){
				System.out.println(rs.getString(2));
			}
			rs.absolute(1);
			
			rs.updateString(2, "ttt");
			rs.updateRow();
			rs.beforeFirst();
			
			System.out.println("===============");
			while(rs.next()){
				System.out.println(rs.getString(2));
			}
			

	=> pagination: using hibernate
	=> pagination with jdbc

	Getting resultset meta data
	-------------------------

			ResultSetMetaData rsMeta=rs.getMetaData();
			System.out.println("No of column:"+rsMeta.getColumnCount());
			
			for(int i=1;i<=rsMeta.getColumnCount();i++){
				System.out.println(rsMeta.getColumnClassName(i));
			}


Auto key generation

	Consider:

create table customer
(
	customerId int not null primary key AUTO_INCREMENT,
	customerName varchar(60) not null,
	customerAddress varchar(80) not null
);


insert into customer(customerName,customerAddress) values('raja','delhi');

insert into customer(customerName,customerAddress) values('ravi','noida');

insert into customer(customerName,customerAddress) values('keshav','gzb');




Now when record is inserted form JDBC i want PK to return to customer?

			
	con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/raj","root","root");
	stmt=con.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);
			
	//insert one row that will generate an auto increment key in key field
			
	stmt.executeUpdate("insert into customer(customerName, customerAddress)values ('raja','noidai')",Statement.RETURN_GENERATED_KEYS);
		
	int getKey=-1;
	rs=stmt.getGeneratedKeys();
	if(rs.next()){
			getKey=rs.getInt(1);
		}
	System.out.println(getKey);



Batch Update

	==> Sending multiple insert etc hit in one go!
	

 



create table account(id int not null primary key auto_increment,currentBalance int, savingBalance int);
);

insert into account (currentBalance ,savingBalance )values(500, 500);


			Class.forName("com.mysql.jdbc.Driver");

			connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_jdbc", "root", "root");
			
			statement=connection.createStatement();
			
			statement.addBatch("update account set currentBalance = currentBalance - 100 where id=1");
			statement.addBatch("update account set savingBalance = savingBalance + 100 where id=1");
			
			statement.executeBatch();
			System.out.println("done ");




Transations (ACID): using code (programmatic approaching)  5%
		    using annotation (declerative approach) 95%

	Steps for making an transactions:




			Class.forName("com.mysql.jdbc.Driver");

			connection = DriverManager.getConnection
			("jdbc:mysql://localhost:3306/employee_jdbc", "root", "root");
			
			connection.setAutoCommit(false);
			
			
			
			statement=connection.createStatement();
			
			statement.addBatch("update account set currentBalance = currentBalance - 100 where id=1");
			statement.addBatch("update account set savingBalance = savingBalance + 100 where id=1");
			
			statement.executeBatch();
			
			connection.commit();
			System.out.println("done ");


	In the catch Block
 
		catch (SQLException e) {
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}









http://stackoverflow.com/questions/1376218/is-there-a-way-to-retrieve-the-autoincrement-id-from-a-prepared-statement
long key = -1L;
Statement statement = connection.createStatement();
statement.executeUpdate(YOUR_SQL_HERE, Statement.RETURN_GENERATED_KEYS);
ResultSet rs = statement.getGeneratedKeys();
if (rs != null && rs.next()) {
    key = rs.getLong(1);
}
